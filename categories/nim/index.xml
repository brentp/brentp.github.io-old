<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nim on genomics dev blog</title>
    <link>../../categories/nim/</link>
    <description>Recent content in Nim on genomics dev blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Jan 2019 10:15:01 -0700</lastBuildDate>
    
	<atom:link href="../../categories/nim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hts Nim Sugar</title>
      <link>../../post/hts-nim-sugar/</link>
      <pubDate>Fri, 25 Jan 2019 10:15:01 -0700</pubDate>
      
      <guid>../../post/hts-nim-sugar/</guid>
      <description>hts-nim is a library that allows one to use htslib via the nim programming language. Nim is a garbage-collected language that compiles to C and often has similar performance. I have become very productive in nim and especially in hts-nim and there are by now, at least a few other users of hts-nim. This post is to show how one particular feature of nim enables users to write their own functions that will be used no differently than hts-nim&amp;rsquo;s provided functionality.</description>
    </item>
    
    <item>
      <title>get the least out of your CRAM files</title>
      <link>../../post/cram-speed/</link>
      <pubDate>Thu, 11 Oct 2018 13:39:21 -0600</pubDate>
      
      <guid>../../post/cram-speed/</guid>
      <description>This post is highlight the speed benefit of CRAM files over BAM files as it seems to not be widely used.
CRAM files are often about 50% of the size of an identical BAM for lossless compression largely due to not saving the sequence of each read, instead keeping only the delta to the reference sequence for the alignment. Additional savings can be gained from lossy compression of base-qualities and read-names.</description>
    </item>
    
    <item>
      <title>Using Nim to count sequence-motifs in a BAM</title>
      <link>../../post/nim-mundane2/</link>
      <pubDate>Thu, 04 Oct 2018 09:23:24 -0600</pubDate>
      
      <guid>../../post/nim-mundane2/</guid>
      <description>This is the 2nd post describing mundane uses of nim in day-to-day genomics.
The first post is here.
For today&amp;rsquo;s mundane task, a colleague asked me to count the occurence of 2 k-mers of length 39 in each of 603 BAMs of 60X coverage. We don&amp;rsquo;t care about partial matches or allowing mismatches so this is a pretty simple task. There are more efficient computational methods for this, but I wrote the simplest version, verified that it ran in &amp;lt; 2 hours for a single bam and then ran it overnight on a single machine with 64 CPUs and sent the results in the morning.</description>
    </item>
    
    <item>
      <title>Nim Hts Example</title>
      <link>../../post/nim-hts-example/</link>
      <pubDate>Mon, 01 Oct 2018 13:17:00 -0600</pubDate>
      
      <guid>../../post/nim-hts-example/</guid>
      <description>Several folks have recently expressed interest in learning nim which I have found to be very useful for genomics because it has a simple syntax like python, but it compiles to be as fast as C. In the case of mosdepth which is written in nim, it is faster than the competing C implementations because of choice of algorithm.
I have started using nim in my day-to-day scripting to replace python, in part, so this will be the first in a series of posts that show some relatively mundane code that I write like a script but will compile to run very fast.</description>
    </item>
    
  </channel>
</rss>